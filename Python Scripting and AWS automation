Ptyhon programming:
   Types of Operators
   Conditional Statemtns
   Looping
   Control Statements
   Map, filters
   Functions
   Modules(os, sys, subprocess, csv, random, future, etc...)
   Exception Handling
   Working with Files.
   Regular Expressions
   Python Classes and objects/OOPS
   

ASW automation:
AWS CLI
Boto3(resource and client)
Lambda
Triggers of Lambda
   1. API Gateway
   2. S3 events
   3. Cloud Watch Events
   4. CloudFront Events
   5. SNS events.
 
 Example start a EC2 Server.
 Go to aws console to EC2, right click one instance and click "start".
 One Ec2 server is started.
 Login from outside AWS CLI
 
[ec2-user@ip-172-31-26-48 ~]$ sudo su-
[ec2-user@ip-172-31-26-48 ~]$ clear
[ec2-user@ip-172-31-26-48 ~]$ ls
[ec2-user@ip-172-31-26-48 ~]$ vi git_ini.py

git_install.py

#This script is used to install fresh git or it also used to update the existing git

import os
import sys
import platform
import time
import re
import urllib
from subprocess import *
os.system('clear')

print("please wait checking the pre-requisites......")
time.sleep(2)

def welcome():
	print"**********************"	
  	print("This script will find the existing git version if any\nand also update/install latest git")
  	print("**********************")
  	time.sleep(4)
  
def Thank_you():
	print("\n\nThank you for using this script\nHave a great day\n")
	return None  

def run_cmd_status(cmd):
	sp=Popen(cmd,shell=True,stdout=PIPE,stderr=PIPE)
	rt=sp.wait()
	out, err = sp.communicate()
	return out
 
def is_root():
	if os.getuid()==0:
		return True
	else:
		return False
	try:
		if is_root()==True:
			print("you are the root user. so you can run this script")
		else:
			print("Please run this script as a root user")
			Thank_you()
			sys.exit(1)
	except Exception as e:
		print (e)
		print("please rectify the erro and tryit")
		sys.exit(2)
	try:
		#print("Checking wget command")
		wget_status=run_com_status('wget --version')
		if wget_status=='':
		      #print("out is none")
		      print("Please wait installing wget command")
		      run_cmd_status("yum install wget -y")
		else:
		      print("satiesfied with wget command")
	except Exception as e:
		print(e)
		print("Please rectify the error and try it")
		Thank_you()
		sys.exit(3)
	try:
		#print("Checking pip command")
		pip_status=pip_status=run_cmd_status('pip --version')
		if (pip_status==''):
			print("Please wiat installing pip command")
			run_comd_status("easy_install pip")
		else:
			print("Satiesfied with pip command")
	except Exception as e:
		print(e)
		print("Please rectify the error and try it")
		Thank_you()
		sys.exit(4)
	try:
		try:
			from bs4 import BeautifulShop
			print("imported BeautifulShop sucessfully")
		except Exception as e:
			print("Please wait installing the BeatifulShop (bs4)")
			run_cmd_status('pip install bs4')
			from bs4 import BeaufifulShop
	except Exception as e:
		print(e)
		print("Please rectify the error and try it")
		Thank_you()
		sys.exit(5)
  
def get_current_git_version():
	sp=Popen('git --version', shell=True, stdout=PIPE, stderr=IPIP)
	rt=sp.wait()
	out, err=sp.communicate()
	if rt==0:
		if platform.system()=="windows":
			return out.strip().strip(".windows.1").split()[-1]
		else:
			return out.split()[-1]
	else:
		if "not found" in err:
			return None
		print(err*5+2)
		sys.exit(2)
    
def all_git_versions():
	link="https://mirrors.edge.kernel.org/pub/software/scm/git/"
	page=urllib.urlopen(link)
	html_doc=page.read()
	page.close()
	soup=BeautifulSoup(html_doc, 'html.parser')
	my_tar_ob=re.compile("git-\d\.\d+\.\d+\.tar\.gz")
	my_ber_ob=re.compile("\d\.d+\.\d")
	href_link=[]
	var_li=[]
	for each in soup.find_all('a', href=True):
		my_tar==each.get("href")			   
		if my_tar_ob.search(my_tar)!=None:
			#print my_tar
			href_link.append(link+my_tar)
			if my_bar_ob.search(my_tar)!=None:
				#print my_bar_ob.search(my_tar).group()
				ver_li.append(my_ber_ob.search(my_tar).group())
	return href_link, var_li
  
def select_version(git_ver, ver_li):
	while True:
		display_versions(git_ver, ver_li)
		print("\nEnter required version from above list:")
		usr_ver=raw_input()
		if usr_ver not in ver_li:
		      continue
		else:
		      return usr_ver
    

def display_versions(git_ver, ver_li):
	Flag=False
	if git_ver not in ver_li:
		for each in ver_li:
		      print(each, "\t",)
	else:
		for each in ver_li:
		      if each==git_ver:
			      flag=True
			      continue
		      if Flag:
			      print(each, "\t",)
	return None
          
def run_cmd(cmd):
	sp=Popen(cmd, shell=True, stdout=PIPE, stderr=PIPE)
	rt=sp.wait()
	if rt==0:
		return "Sucess"
	else:
		out, err = sp.communicate()
		print(err)
		print("Please rectify the error and try it")
		Thank_you()
		sys.exit(4)
  
def install_required_packages():
	cmd1="yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel -y"
	cmd2="yum install gcc perl-Extutiles-MakeMaker -y"
	cmd3="yum install wget -y"
	print("Please wait installing required packages")
	print("(Curl-devel expat-devel gettext-devel openssl-devel zlib-devel and gcc)....")
	run_cmd(cmd1)
	run_cmd(cmd2)
	run_cmd(cmd3)
	time.sleep(4)
	return None
  
def get_current_working_dir():
	sp=Popen("pwd", shell=True, stdout=PIPE, stderr=PIPE)
	rt=sp
	rt=sp.wait()
	out,err=sp.communicate()
	if(rt==0):
	      #print "out is: ".out
	      return out.strip('\n').strip()
	else:
	      print(err)
	      print("please rectify it and try again")
	      Thank_you()
	      sys.exit(5)
  
def install_git(href_link, usr_ver):
	install_required_packages()
	for each in href_link:
	      if usr_ver in each:
		      url=each
		      break
	download_tar_gz="wget. "+url
	run_cmd(download_tar_gz)
	tar_ball=url.split(os.sep)[-1]
	cmd3="tar -xzf "+tar_ball
	run_cmd(cmd2)
	cmd3=tar_ball.rstrip(".tar.gz")
	pwd=get_current_working_dir()
	cmd4=pwd+os.sep+cmd3
	os.chdir(cmd4)
	os.system("./configure")
	os.system("make")
	os.system("make install")
	#os.system("In -s /usr/local/bin/git /bin/git")
	
def new_install_git():
	href_link, ver_li=all_git_versions()
	usr_ver=select_version(None, ver_li)
	install_git(href_link, usr_ver)
  
def update_git(git_ver):
  href_link, ver_li=all_git_versions()
  #print("all links are: ",ver_li)
  #print("all git version are: ", ver_li)
  usr_vers=select_version(git_ver, ver_li)
  #print("you required ver is: ", usr_ver)
  install_git(href_link, usr_ver)
  
def user_request():
	while True:
		print("Enter only yes/no")
		yes_or_no=raw_input()
		if yes_or_no.lower() in ['yes','no']:
			if yes_or_no.lower()=="yes":
				return "yes"
			else:
			      Thank_you()
			      sys.exit()
def main():
	git_ver=get_current_git_version()
	if git_ver==None:
		print("Git is not installed\n")
		print("Do you want to install git on this host?")
		yes_or_no=user_request()
		update_git(git_ver)
		print("Now you latest git is: ", git_current_git_version())
		Thank_you()

if __name__=="_main__":
	time.sleep(2)
	print("Pre-requisites are statiesfied")
	time.sleep(4)
	os.system('clear')
	welcome()
	main()

start_stop_ec2.py

import boto3 
import os
import time
     
def get_ec2_con_for_give_region(my_region):
	ec2_con_re=boto3.resource('ec2', region_name=my_region)
	return ec2_con_re
	
def list_instances_on_my_region(ec2_con_re):
   for each in ec2_con_re.instances.all():
   	print(each.id)
	
def get_instant_state(ec2_con_re, in_id):
   for each in ec2_con_re.instances.filter(Filters=[{'Name':'instance-id',"Values":[in_id]}]):
   	pr_st=each.state['Name']
	
def start_instance(ec2_con_re, in_id):
	pr_st=get_instant_state(ec2_con_re, in_id)
	if pr_st=="running":
		print("instnace is already running")
	else:
		for each in ec2_con_re.instances.filter(Filters=[{'Name':'instance-id',"Values":[in_id]}]):
			each.start()
			print("please wait it is going to start, once if it is started then we will let you know")
			each.wait_until_running()
			print("now it is running")
	return

def Thank_you():
	print("\n\n******Thank you for using this script******")
	return None
	
def stop_instance(ec2_con_re, in_id):
	pr_st=get_instant_state(ec2_con_re, in_id)
	if pr_st=="stopped":
		print("instnace is already stopped")
	else:
		for each in ec2_con_re.instances.filter(Filters=[{'Name':'instance-id',"Values":[in_id]}]):
			each.stop()
			print("please wait it is going to stop, once if it is stopped then we will let you know")
			each.wait_until_stopped()
			print("now it is topped")
	return
	
def welcome():
	print("This script will help you to start or stop ec2 instances based on your required region and instnace id")
	print("Enjoy by using this script\n\n")
	time.sleep(3)
	
def main():
	welcome()
	py_region=raw_imput("Enter you region name:")
	print("please wait....conneting to your aws ec2 console......")
        Than_you()
      
if __name__=="_main__":
	os.system('clear')
	welcome()
	main()
	
python start_stop_ec2.py

Intermediate Python Programming
//https://www.youtube.com/watch?v=HGOBQPFzWKo

Topic:
List.py 
	myList = ["banana", "cherry", "apple"];
	len(mylist), myList.append(""), mylist.pop, mylist.remove("cherry") ...
	a = [1,2,3,4,5,6]
	
tuples.py  tuples samile list but could not changed.
	pytuple = ("max", 28. "Boston")
	print(pytube)
	
Directory: Key-Value pairs, Unodrdered, Mutable.	

Sets: unordered, mutable, no duplicates.

Strings: ordered, immutable, text representation.

Collections: Counter, nuamedtuple, OrderedDict, defaultdict, deque

lambda.py: exceptions.py Errors and Exceptions.

logging.py python has powerful log module. logging.debug, logging.info, logging.warning, logging.error, logging.critical.

json: one web file format or data structure (same as diectory) or DB.

Random Numbers.

Decorators: it is powerfur module using at classes and functions.

generators.py: 
Treading and mulituples 


	

	
	

	
	
	


