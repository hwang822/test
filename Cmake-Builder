Simple scripting lanaguage in CMakeLists.txt
   Built-in commands for common rules.
     - add_library(MyLib MyLib.cxx)
     - add_exectuable(MyExe MyMain.cxx)
  Eample project using Boost
  
     cmake_minimum_required(VERSION 2.6)
     project(MyProject)
     find_package(Boost REQUIRED thread signals)
     include_directories($(Boost_INCLUDE_DIRS)
     add_exectuable(MyExe MyMain.cxx)
     target_link_libraries(MyExe ${Boost_LIBARIES})
     
Configure setup (can using CMake IDE to setup).
    Read top tree CMakeLists.txt -> Read tree leavs CMakeLists.txt -> Wirte CMakeCache.txt 
Generate Setup
     




How to make a good 
https://www.youtube.com/watch?v=_yFPO1ofyF0&list=PLK6MXr8gasrGmIiSuVQXpfFuE1uPT615s

CMake is a c++ build tool based on CMakeLists.txt scripts without vs IDE.
How to CMake Good - 0a Installing on LInux
How to CMake Good - 0b Running CMake

How to CMake Good - 0c Using Visual Studio
How to CMake Good - 0d Visual C++ without Visual Studio 
How to CMake Good - 0e

****************************
How to CMake Good - 1a - A "Hello, World" exectutable
https://www.youtube.com/watch?v=V1YP7eJHDJE&list=PLK6MXr8gasrGmIiSuVQXpfFuE1uPT615s&index=3


Create folder HelloVTK\src

Create HelloVTK\src\CMakeLists.txt file
cmake_minimum_required(VERSION 3.3 FATAL_ERROR)
message (STATUS "VTK_VERSION: ${VTK_VERSION}")
project(HelloVTK)
add_executable(HelloVTK MACOSX_BUNDLE HelloVTK.cxx )

Create HelloVTK\src\HelloVTK.cxx file
#include <iostream>

int main(int, char *[]) {
std::cout << "Hello VTK" << std::endl;
	return 0;
}

from HelloVTK\src\ open vs2019
It will automatic run CMakeLists.txt to generate camke build for this project at default folder HelloVTK\src\out.

Right cliek CMakeLists.txt to build.
or CMD run Cmake HelloVTK\src\out\build\x64-Debug\.

put break point at main.cpp and run Debug/Start(or F5) to run

**********************************
How to CMake Good - 1b - A Adding a Library
https://www.youtube.com/watch?v=abuCXC3t6eQ&list=PLK6MXr8gasrGmIiSuVQXpfFuE1uPT615s&index=4

create HelloVTK\src\HelloVTKLib.cxx 
#include <iostream>
#include "HelloVTKLib.hpp"
void Hello::SayHello(void) {std::cout << "Hello VTK" << std::endl;};

and HelloVTK\src\HelloVTKLib.hpp files
class Hello {
public:
	void static SayHello(void);
};

modify HelloVTK\src\HelloVTK.cxx
#include "HelloVTKLib.hpp"
int main(int, char *[]) {
	Hello::SayHello();
	return 0;
}

Moidify the CMakeLists.txt to add New lib Hello to the prject
cmake_minimum_required(VERSION 3.3 FATAL_ERROR)
message (STATUS "VTK_VERSION: ${VTK_VERSION}")
project(HelloVTK)

add_library(Hello STATIC HelloVTKLib.cxx HelloVTKLib.hpp)  #default build Static lib
add_executable(HelloVTK MACOSX_BUNDLE HelloVTK.cxx)
target_link_libraries(HelloVTK PRIVATE Hello)

Rebuild CMakeLists and run

**********************************
How to CMake Good - 1c - Subdirectories and Target Interface Properties
https://www.youtube.com/watch?v=SYgESCQeGJY&list=PLK6MXr8gasrGmIiSuVQXpfFuE1uPT615s&index=8


********************************************************
Example: 
Use CMake to build and package vtkbool.

Get vtkbool codes from repository.
from vtbool folder right click to open vs2019

select vtkbool\CMakeLists.txt and right click "Generate Cache for vtkbool".
    1> [CMake] -- Build files have been written to: C:/Workarea/vtkbool/out/build/x64-Debug
	
select vtkbool\CMakeLists.txt (two times) and right click "Build" to make sure the original vtkbool codes could be built successfully! 

  [13/13] cmd.exe /C "cmd.exe /C ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -E __create_def C:\Workarea\vtkbool\out\build\x64-Debug\CMakeFiles\vtkbool.dir\exports.def C:\Workarea\vtkbool\out\build\x64-Debug\CMakeFiles\vtkbool.dir\exports.def.objs && cd C:\Workarea\vtkbool\out\build\x64-Debug" && "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -E vs_link_dll --intdir=CMakeFiles\vtkbool.dir --rc=C:\PROGRA~2\WI3CF2~1\10\bin\100183~1.0\x64\rc.exe --mt=C:\PROGRA~2\WI3CF2~1\10\bin\100183~1.0\x64\mt.exe --manifests  -- C:\PROGRA~2\MICROS~2\2019\PROFES~1\VC\Tools\MSVC\1422~1.279\bin\Hostx64\x64\link.exe /nologo @CMakeFiles\vtkbool.rsp  /out:vtkbool.dll /implib:vtkbool.lib /pdb:vtkbool.pdb /dll /version:0.0 /machine:x64  /debug /INCREMENTAL  /DEF:CMakeFiles\vtkbool.dir\exports.def   && cmd.exe /C "cd /D C:\Workarea\vtkbool\out\build\x64-Debug && powershell -noprofile -executionpolicy Bypass -file C:/Workarea/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Workarea/vtkbool/out/build/x64-Debug/vtkbool.dll -installedDir C:/Workarea/vcpkg/installed/x64-windows/debug/bin -OutVariable out""
     Creating library vtkbool.lib and object vtkbool.exp
     Creating library vtkbool.lib and object vtkbool.exp
Build succeeded.	 
	 
The vtkbool has self codes and three dependencies codes.

Add install target command at vtkbool and dependencies CMakeLists.txt

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# for dependency install target at CMakeLists.txt

set(INSTALL_INCLUDE_DIR include CACHE PATH
	"Installation directory for header files")
	
set_target_properties(dependency PROPERTIES
  PUBLIC_HEADER "dependency.h")

install(TARGETS dependency
  # IMPORTANT: Add the foo library to the "export-set"
  EXPORT vtkboolTargets
  RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}/vtkbool/libs/dependency"
    COMPONENT dev)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# for vtkbool install target  at CMakeLists.txt

set_target_properties(vtkbool PROPERTIES
  PUBLIC_HEADER vtkPolyDataBooleanFilter.h vtkPolyDataContactFilter.h Utilities.h)

install(TARGETS vtkbool
  # IMPORTANT: Add the vtkbool library to the "export-set"
  EXPORT vtkboolTargets
  RUNTIME DESTINATION "${INSTALL_BIN_DIR}" COMPONENT bin
  LIBRARY DESTINATION "${INSTALL_LIB_DIR}" COMPONENT shlib
  PUBLIC_HEADER DESTINATION "${INSTALL_INCLUDE_DIR}" 
    COMPONENT dev)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# for vtkbool pakcage  at CMakeLists.txt

	set(VTKBOOL_MAJOR_VERSION 0)
	set(VTKBOOL_MINOR_VERSION 1)
	set(VTKBOOL_PATCH_VERSION 0)
	set(VTKBOOL_VERSION
	  ${VTKBOOL_MAJOR_VERSION}.${VTKBOOL_MINOR_VERSION}.${VTKBOOL_PATCH_VERSION})

	# Offer the user the choice of overriding the installation directories
	set(INSTALL_LIB_DIR lib CACHE PATH "Installation directory for libraries")
	set(INSTALL_BIN_DIR bin CACHE PATH "Installation directory for executables")
	set(INSTALL_INCLUDE_DIR include CACHE PATH
	  "Installation directory for header files")
	if(WIN32 AND NOT CYGWIN)
	  set(DEF_INSTALL_CMAKE_DIR CMake)
	else()
	  set(DEF_INSTALL_CMAKE_DIR lib/CMake/vtkbool)
	endif()
	set(INSTALL_CMAKE_DIR ${DEF_INSTALL_CMAKE_DIR} CACHE PATH
	  "Installation directory for CMake files")

	# Make relative paths absolute (needed later on)
	foreach(p LIB BIN INCLUDE CMAKE)
	  set(var INSTALL_${p}_DIR)
	  if(NOT IS_ABSOLUTE "${${var}}")
		set(${var} "${CMAKE_INSTALL_PREFIX}/${${var}}")
	  endif()
	endforeach()


	# set up include-directories
	include_directories(
	  "${PROJECT_SOURCE_DIR}"   # to find vtkbool .h files
	  "${PROJECT_BINARY_DIR}")  # 


    #add_subdirectory()

		# The interesting stuff goes here
	# ===============================

	# Add all targets to the build-tree export set
	
	export(TARGETS vtkbool dependency
	  FILE "${PROJECT_BINARY_DIR}/vtkboolTargets.cmake")

	# Export the package for use from the build-tree
	# (this registers the build-tree with a global CMake-registry)
	export(PACKAGE vtkbool)

		# Create the vtkboolConfig.cmake and vtkboolVersionConfig files
	file(RELATIVE_PATH REL_INCLUDE_DIR "${INSTALL_CMAKE_DIR}"
	   "${INSTALL_INCLUDE_DIR}")
	# ... for the build tree
	set(CONF_INCLUDE_DIRS "${PROJECT_SOURCE_DIR}" "${PROJECT_BINARY_DIR}" "${PROJECT_SOURCE_DIR}/libs/vp" "${PROJECT_BINARY_DIR}/libs/vp")
	configure_file(vtkbool.cmake.in
	  "${PROJECT_BINARY_DIR}/vtkboolConfig.cmake" @ONLY)
	# ... for the install tree
	set(CONF_INCLUDE_DIRS "\${VTKBOOL_CMAKE_DIR}/${REL_INCLUDE_DIR}")
	configure_file(vtkbool.cmake.in
	  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vtkboolConfig.cmake" @ONLY)
	# ... for both
	configure_file(vtkboolVersion.cmake.in
	  "${PROJECT_BINARY_DIR}/vtkboolVersionConfig.cmake" @ONLY)


	# Install the vtkbool.cmake and vtkboolVersion.cmake
	install(FILES
	  "${PROJECT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/vtkboolConfig.cmake"
	  "${PROJECT_BINARY_DIR}/vtkboolVersionConfig.cmake"
	  DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)

	#Install the export set for use with the install-tree
	install(EXPORT vtkboolTargets DESTINATION "${INSTALL_CMAKE_DIR}" COMPONENT dev)

#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
	export(TARGETS vtkbool dependency FILE "${PROJECT_BINARY_DIR}/vtkboolTargets.cmake")
	    will export vtkbool and dependency to create vtkboolTargets.cmake.
			
    export(PACKAGE vtkbool) will registers the build-tree with a global CMake-registry at
	local computer Registry Editor 
	  Computer\HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\VTKBool
	      Data: C:/Workarea/vtkbool/out/build/x64-Debug
	
    From this location the user will using find_package command to get vtkboolConfig.cmake file to get vtkbool package information.
	
	configure_file(vtkbool.cmake.in "${PROJECT_BINARY_DIR}/vtkboolConfig.cmake" @ONLY)
	    will export vtkboolConfig.make based on vtkbool.cmake.in file information.
		
		# - Config file for the VTKBOOL package
		# It defines the following variables
		#  VTKBOOL_INCLUDE_DIRS - include directories for MeshFix
		#  VTKBOOL_LIBRARIES    - libraries to link against

		# Compute paths
		get_filename_component(VTKBOOL_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
		set(VTKBOOL_INCLUDE_DIRS "@CONF_INCLUDE_DIRS@")
		include("${VTKBOOL_CMAKE_DIR}/VTKBoolTargets.cmake")
		set(VTKBOOL_LIBRARIES VTKBOOL)
		
    		
		install(FILES ...) and install(EXPORT ...) will create install lib and header files to the target machine.
		
    After all done and saved,
	
	select vtkbool\CMakeLists.txt and right click "Generate Cache for vtkbool".
		1> [CMake] -- Build files have been written to: C:/Workarea/vtkbool/out/build/x64-Debug
		
	select vtkbool\CMakeLists.txt (two times) and right click "Build" 

	  [13/13] cmd.exe /C "cmd.exe /C ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -E __create_def C:\Workarea\vtkbool\out\build\x64-Debug\CMakeFiles\vtkbool.dir\exports.def C:\Workarea\vtkbool\out\build\x64-Debug\CMakeFiles\vtkbool.dir\exports.def.objs && cd C:\Workarea\vtkbool\out\build\x64-Debug" && "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -E vs_link_dll --intdir=CMakeFiles\vtkbool.dir --rc=C:\PROGRA~2\WI3CF2~1\10\bin\100183~1.0\x64\rc.exe --mt=C:\PROGRA~2\WI3CF2~1\10\bin\100183~1.0\x64\mt.exe --manifests  -- C:\PROGRA~2\MICROS~2\2019\PROFES~1\VC\Tools\MSVC\1422~1.279\bin\Hostx64\x64\link.exe /nologo @CMakeFiles\vtkbool.rsp  /out:vtkbool.dll /implib:vtkbool.lib /pdb:vtkbool.pdb /dll /version:0.0 /machine:x64  /debug /INCREMENTAL  /DEF:CMakeFiles\vtkbool.dir\exports.def   && cmd.exe /C "cd /D C:\Workarea\vtkbool\out\build\x64-Debug && powershell -noprofile -executionpolicy Bypass -file C:/Workarea/vcpkg/scripts/buildsystems/msbuild/applocal.ps1 -targetBinary C:/Workarea/vtkbool/out/build/x64-Debug/vtkbool.dll -installedDir C:/Workarea/vcpkg/installed/x64-windows/debug/bin -OutVariable out""
		 Creating library vtkbool.lib and object vtkbool.exp
		 Creating library vtkbool.lib and object vtkbool.exp
	Build succeeded.	 
	
    select vtkbool\CMakeLists.txt (two times) and right click "Install"
	
>------ Build started: Project: CMakeLists, Configuration:  ------
  [0/1] cmd.exe /C "cd /D C:\Workarea\vtkbool\out\build\x64-Debug && "C:\Program Files (x86)\Microsoft Visual Studio\2019\Professional\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\cmake.exe" -P cmake_install.cmake"
  -- Install configuration: "Debug"
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/lib/vtkbool.lib
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/bin/vtkbool.dll
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/include/vtkPolyDataBooleanFilter.h
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/CMake/vtkboolConfig.cmake
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/CMake/vtkboolVersionConfig.cmake
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/CMake/vtkboolTargets.cmake
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/CMake/vtkboolTargets-debug.cmake
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/lib/decomp.lib
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/include/libs/decomp/Decomposer.h
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/lib/vp.lib
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/include/libs/vp/Tools.h
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/lib/merger.lib
  -- Up-to-date: C:/Workarea/vtkbool/out/install/x64-Debug/include/libs/merger/Merger.h
Install succeeded.


    Open another application and add find_package(vtkbool REQUIRED) command to look for vtkbool at register Computer\HKEY_CURRENT_USER\Software\Kitware\CMake\Packages\VTKBool location file vtkboolConfig.camke
	
	find_package(vtkbool REQUIRED)
	include_directories(${VTKBOOL_INCLUDE_DIRS})
	include_directories(${VTKBOOL_INCLUDE_DIRS}/libs/vp)

	add_executable(application MACOSX_BUNDLE application.cxx) 
    target_link_libraries(application vtkbool)

    select application\CMakeLists.txt and right click "Generate Cache for application".
	select application\CMakeLists.txt (two times) and right click "Build" 













