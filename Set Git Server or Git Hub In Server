
In Server side:

1. install git and add git C:\Program Files\Git\bin to path = C:\Program Files\Git\bin+%path.

2. create repository folder as seismicpps-job01:/home/developer/git/repository/sieismicpps.git

3. at github https://github.com/hwang822/rect-skeleton.git

4. cd to seismicpps-job01:/home/developer/git/repository/sieismicpps.git

   run git init --bare to create repository



in client side

   go to https://git-scm.com/download/win. download and isntall.

   cd to any workarea folder 

   run git init to create repository.

   git remote add origin https://github.com/hwang822/rect-skeleton.git

   or git remote add origin seismicpps-job01:/home/developer/git/repository/sieismicpps.git 

   

   git status.

   add new files.

   git add -A

   git commit -m "init add"

   git push origin master

   

   git clone https://github.com/hwang822/WCFandWVC will get whole reportory of WCFandWVC to local from hub
   
Command Line Fundamentals.

git version 2.13.3.windows.1
git version 2.13.3.windows.1
git --config 


https://www.youtube.com/watch?v=3RjQznt-8kE
Git is a 'distributed version control system'

1. Why is git: git store all version of codes in this proejct. Onlein service that hosts our projects.

2. Download and install git.
   C:\Workarea>git --version
   git version 2.22.0.windows.1
   
   C:\Workarea>git config user.name
   hwang822
   commands: ls, cd, rm, rn...

$ git help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <conc


3. How git is working

  repo is a contrainer for a project you want ot track with Git.
  many diff repos for diff prjects.
  
 My Project
   .git
   index.html
   style.css
   img
      loge.png
      craze.png

Commit History

Moidified    edit a file.
Staging      git add -A
Committed    git commit -m "commit a file"

4. Create a repository



**************************
C:\Workarea>make git-test
'make' is not recognized as an internal or external command,
operable program or batch file.

C:\Workarea>cd git-test
The system cannot find the path specified.

C:\Workarea>makedir git-test
'makedir' is not recognized as an internal or external command,
operable program or batch file.

C:\Workarea>mkdir git-test

C:\Workarea>cd git-test

C:\Workarea\git-test>mkdir git-one

C:\Workarea\git-test>mkdir git-two

C:\Workarea\git-test>cd git-one

C:\Workarea\git-test\git-one>git init
Initialized empty Git repository in C:/Workarea/git-test/git-one/.git/

********************

5. staging Files

create a file at git-one folder
index.html

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>Git One</title>
	</head>
	<body>
		<h1>This project already has some lines</h1>
	</body>
</html>

C:\Workarea\git-test\git-one>git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        index.html  

C:\Workarea\git-test\git-one>git add -A

C:\Workarea\git-test\git-one>git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   index.html

create an another file styles.css

body{
	background: red;
}

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        styles.css
        
C:\Workarea\git-test\git-one>git add .

C:\Workarea\git-test\git-one>git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   index.html
        new file:   styles.css

two files ready to commit.

6. Making commit

   commit ust same file added in the staging area.
   
   git commit -m "add two files to repo"

   C:\Workarea\git-test\git-one>git commit -m "add index.html and stype.css file"
   [master (root-commit) ff83c01] add index.html and stype.css file
    2 files changed, 13 insertions(+)
    create mode 100644 index.html
    create mode 100644 styles.css        

   updated index.html file 

<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8">
		<title>change to second commit </title>
	</head>
	<body>
		<h1>This project already has some lines</h1>
	</body>
</html>

C:\Workarea\git-test\git-one>git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   index.html

no changes added to commit (use "git add" and/or "git commit -a")   

C:\Workarea\git-test\git-one>git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   index.html
        
C:\Workarea\git-test\git-one>git commit -m "add index.html title"
[master 2b119a5] add index.html title
 1 file changed, 1 insertion(+), 1 deletion(-)        

update style.css file
body{
	background: red;
	font-size: 2em;
}

C:\Workarea\git-test\git-one>git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   styles.css

no changes added to commit (use "git add" and/or "git commit -a")

C:\Workarea\git-test\git-one>git add .

C:\Workarea\git-test\git-one>git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   styles.css


C:\Workarea\git-test\git-one>git commit -m "change body fout size"
[master 3947525] change body fout size
 1 file changed, 1 insertion(+)

C:\Workarea\git-test\git-one>git log
commit 3947525e61d76b334af56ecf11006d0bdf2f18cd (HEAD -> master)
Author: hwang822 <hwang822@gmail.com>
Date:   Thu Aug 8 11:41:18 2019 -0500

    change body fout size

commit 2b119a5f25cc7182d1ade3dc6af40509e1bd3e15
Author: hwang822 <hwang822@gmail.com>
Date:   Thu Aug 8 11:36:04 2019 -0500

    add index.html title

commit ff83c017488bb269c5dae921aac1246162ccba04
Author: hwang822 <hwang822@gmail.com>
Date:   Thu Aug 8 11:21:54 2019 -0500

    add index.html and stype.css file

C:\Workarea\git-test\git-one>git log --oneline
3947525 (HEAD -> master) change body fout size
2b119a5 add index.html title
ff83c01 add index.html and stype.css file

we can see diff commit.

7. Undoing Stuff

Checkout commit
C:\Workarea\git-test\git-one>git log --oneline
3947525 (HEAD -> master) change body fout size
2b119a5 add index.html title
ff83c01 add index.html and stype.css file

C:\Workarea\git-test\git-one>git checkout 2b119a5



Revert Commit
C:\Workarea\git-test\git-one>git revert 2b119a5


Reset Commit

git reset 2b119a5 --hard


8. Creating Branches

C:\Workarea\git-test\git-one>git branch feature-1

C:\Workarea\git-test\git-one>git branch
  feature-1
* master

C:\Workarea\git-test\git-one>git checkout feature-1
switch to branch feature-1

C:\Workarea\git-test\git-one>git checkout master
switch to branch master

C:\Workarea\git-test\git-one>git branch -D feature-1
Deleted branch feature-1 (was 3947525).

C:\Workarea\git-test\git-one>git branch
* master

C:\Workarea\git-test\git-one>git checkout -b feature-a
Switched to a new branch 'feature-a'
M       index.html
M       styles.css

C:\Workarea\git-test\git-one>git branch
* feature-a
  master
  
create a js file feature.js
console.log('feature-a');

C:\Workarea\git-test\git-one>git add .

C:\Workarea\git-test\git-one>git commit -m "add new js file"
[feature-a bf3279c] add new js file
 2 files changed, 1 insertion(+)
 create mode 100644 feature-a.js
 create mode 100644 git
 
 C:\Workarea\git-test\git-one>git checkout master
Switched to branch 'master'

C:\Workarea\git-test\git-one>git checkout -b feature-b
Switched to a new branch 'feature-b'

C:\Workarea\git-test\git-one>git add .

C:\Workarea\git-test\git-one>git commit -m "add feature-b.js file"
[feature-b 711640a] add feature-b.js file
 1 file changed, 1 insertion(+)
 create mode 100644 feature-b.js
 
 C:\Workarea\git-test\git-one>git status
On branch feature-b
nothing to commit, working tree clean

C:\Workarea\git-test\git-one>git checkout master
Switched to branch 'master'


 
 










































