
https://www.youtube.com/watch?v=e0bHm5VfnJ4

*********************************
Why learn Powershell

1. Automation Standard at Microsoft.
2. Management and Administration UI run Powershell underneath
3. Azure and AWS both have wonderful Powershell API's
4. Manager you Linux instances
5. Full power of .NET Framework.
6. Automation platform (.NET, Win32, Native)
7. Simply your life.

*********************************
get-help and get-command

PS C:\WINDOWS\system32> get-command

CommandType     Name
-----------     ----
Alias           Add-ProvisionedAppxPackage
Alias           Add-ProvisioningPackage
...

PS C:\WINDOWS\system32> get-command | more

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           Add-ProvisionedAppxPackage                         3.0        Dism
Alias           Add-ProvisioningPackage                            3.0        Provisi...
Alias           Add-TrustedProvisioningCertificate                 3.0        Provisi...
Alias           Apply-WindowsUnattend                              3.0        Dism
Alias           Disable-PhysicalDiskIndication                     2.0.0.0    Storage
Alias           Disable-StorageDiagnosticLog                       2.0.0.0    Storage

get-help

PS C:\WINDOWS\system32> help Add-PhysicalDisk

NAME
    Add-PhysicalDisk

SYNOPSIS
    Adds a physical disk to the specified storage pool or manually assigns a physical
    disk to a specific virtual disk.


SYNTAX
    Add-PhysicalDisk [-StoragePool] <CimInstance> [-CimSession <CimSession[]>]
    [-ThrottleLimit <Int32>] [-Usage {AutoSelect | ManualSelect | HotSpare | Retired |
    Journal}] -PhysicalDisks <CimInstance[]> [-Confirm] [-WhatIf] [<CommonParameters>]

    Add-PhysicalDisk [-VirtualDisk] <CimInstance> [-CimSession <CimSession[]>]
    [-ThrottleLimit <Int32>] -PhysicalDisks <CimInstance[]> [-Confirm] [-WhatIf]
    [<CommonParameters>]
-- More  --

    


Microsoft do powershell first. Then make GUI.
Make powershell the fundation of gui.

You could down laod powershell api for azure or aws.









windows10 type powershell to start run.

PS C:\WINDOWS\system32> start-transcript
every thing we type will goning to file
PS C:\WINDOWS\system32> get-command

format Verb-command

get-command -Noun service

PS C:\WINDOWS\system32> get-command -Noun service

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Cmdlet          Get-Service                                        3.1.0.0    Microsoft....
Cmdlet          New-Service                                        3.1.0.0    Microsoft....
Cmdlet          Restart-Service                                    3.1.0.0    Microsoft....
Cmdlet          Resume-Service                                     3.1.0.0    Microsoft....
Cmdlet          Set-Service                                        3.1.0.0    Microsoft....
Cmdlet          Start-Service                                      3.1.0.0    Microsoft....
Cmdlet          Stop-Service                                       3.1.0.0    Microsoft....
Cmdlet          Suspend-Service                                    3.1.0.0    Microsoft....

PS C:\WINDOWS\system32> get-service

Status   Name               DisplayName
------   ----               -----------
Running  AdobeARMservice    Adobe Acrobat Update Service
Stopped  AJRouter           AllJoyn Router Service
Stopped  ALG                Application Layer Gateway Service
Running  Amazon Assistan... Amazon Assistant Service
Stopped  AppIDSvc           Application Identity
...

PS C:\WINDOWS\system32> get-alias cls

CommandType     Name                                               Version    Source
-----------     ----                                               -------    ------
Alias           cls -> Clear-Host

***********************************
verb start $

PS C:\WINDOWS\system32> $zebra = Get-Process Microso
ftEdge
PS C:\WINDOWS\system32> $zebra

Handles  NPM(K)    PM(K)      WS(K)     CPU(s)   Id
-------  ------    -----      -----     ------   --
   1733      79    53260     105284       8.16 5400

*********************************

get-PSDrive

PS C:\WINDOWS\system32> Get-PSDrive

Name           Used (GB)     Free (GB) Provider
----           ---------     --------- --------
Alias                                  Alias
C                 156.81        282.69 FileSystem
Cert                                   Certificate
Env                                    Environment
Function                               Function
HKCU                                   Registry
HKLM                                   Registry
Variable                               Variable
WSMan                                  WSMan

PS C:\WINDOWS\system32> Get-PSDrive | where-object {
$_.free -gt 1}

Name           Used (GB)     Free (GB) Provider
----           ---------     --------- --------
C                 156.81        282.69 FileSystem


PS C:\WINDOWS\system32> "{0:p2}" -f 10000000
1,000,000,000.00%

PS C:\WINDOWS\system32> get-volume

DriveLetter FriendlyName FileSystemType DriveType HealthS
                                                  tatus
----------- ------------ -------------- --------- -------
            SYSTEM_DRV   FAT32          Fixed     Healthy
            PBR_DRV      NTFS           Fixed     Healthy
C           Windows8_OS  NTFS           Fixed     Healthy
            WINRE_DRV    NTFS           Fixed     Healthy


*****************************************************
