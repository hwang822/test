https://docs.docker.com/docker-for-windows/

Install docker for windows.
run docker -version
c:\Workarea>docker version
Client: Docker Engine - Community
 Version:           19.03.4
 API version:       1.40
 Go version:        go1.12.10
 Git commit:        9013bf5
 Built:             Thu Oct 17 23:44:48 2019
 OS/Arch:           windows/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.4
  API version:      1.40 (minimum version 1.24)
  Go version:       go1.12.10
  Git commit:       9013bf5
  Built:            Thu Oct 17 23:55:51 2019
  OS/Arch:          windows/amd64
  Experimental:     false
  
  Docker for Windows now requires Microsoftâ€™s Hyper-V. 

  Docker will not  install create vitual box in your windows 10 machine.

  need crate docker hub account to look up avalaible images.
  
  dockeer -- help
  
  ************************************8
  https://www.youtube.com/watch?v=YFl2mCHdv24&t=295s
  
  docker has image include OS, libs, apps, codes and put at PC as sandbox. user could send message 
  to docker server port to run image. dockerfile scripts build image files.
  
  I have create docker image hello-pnp-docker to build pnp code complier and running.
    
  create Docker\pnp-docker\src folder to hold souce code.
  create one file at Docker\pnp-docker\src\index.php
  
  <?php
  echo "Hello, pnp-docker";
  
  create dockerfiles at Docker\pnp-docker\Dockerfile  
  
  FROM php:7.0-apache
  COPY src/ /var/www/html
  EXPOSE 80
  // FROM to get php image from docker hub, COPY sorce code to pnp image container. EXPOSE to runing pnp in localhost:80 port.
  
  run command to launch dockerfile script
  cd Docker\pnp-docker.
  right clikc Docker running icon at tool bar serlect "Switch to Linux Containers" for this linux pnp verson.
  docker build -t hello-pnp-docker .
  //create image
   
************************  
  C:\Workarea\Docker\pnp-docker>docker build -t hell0-pnp-docker .
Sending build context to Docker daemon  3.584kB
Step 1/3 : FROM php:7.0-apache
 ---> aa67a9c9814f
Step 2/3 : COPY src/ /var/www/html
 ---> Using cache
 ---> d565fcb7f80d
Step 3/3 : EXPOSE 80
 ---> Using cache
 ---> b177b6577547
Successfully built b177b6577547
Successfully tagged hell0-pnp-docker:latest
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. 
All files and directories added to build context will have '-rwxr-xr-x' permissions. 
It is recommended to double check and reset permissions for sensitive files and directories.
***************************
C:\Workarea\Docker\pnp-docker>docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hell0-pnp-docker    latest              b177b6577547        About an hour ago   368MB
nginx               latest              5ad3bd0e67a9        7 days ago          127MB
<none>              <none>              ccc6e87d482b        13 days ago         64.2MB
busybox             latest              6d5fcfe5ff17        4 weeks ago         1.22MB
php                 7.0-apache          aa67a9c9814f        13 months ago       368MB
**************************
could see hell0-pnp-docker and pnp have been installed at this windows docker container.

could save this docker image file to linux 

could run this docker image

docker run -p 80:80 hello-pnp-docker
  //run image

and run web IE in localhost
It will display "Hello, pnp-docker!".

It could add option to mount local source code file to the web server folder to get real time change.

docker run -p 80:80 -v C:\Workarea\Docker\pnp-docker/src/:/var/www/htmp/ hello-pnp-docker

***********************
in windows IE localhost

Welcome to nginx!

If you see this page, the nginx web server is successfully installed and working. Further configuration is required.

For online documentation and support please refer to nginx.org.
 Commercial support is available at nginx.com.

Thank you for using nginx.

*****************************
docker command

C:\Workarea\Docker>docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              42514ac01c56        8 days ago          251MB
  
remove images
docker rmi -f hello-world

download busybox image
C:\Workarea\Docker>docker container run -t -i busybox /bin/sh

docker: no matching manifest for windows/amd64 10.0.18362 in the manifest list entries.

An alternative is to go to Docker Desktop and select Switch to Linux Containers
right clikc Docker running icon at tool bar serlect "Switch to Linux Containers"

C:\Workarea\Docker>docker run -d -p 80:80 --name webserver nginx
Unable to find image 'nginx:latest' locally
latest: Pulling from library/nginx
8ec398bc0356: Pull complete              a53c868fbde7: Pull complete                                                                                        79daf9dd140d: Pull complete                                                                                        Digest: sha256:70821e443be75ea38bdf52a974fd2271babd5875b2b1964f05025981c75a6717
Status: Downloaded newer image for nginx:latest
94e188bf10c69c9b3ddcceca804f1782db6cf899a24671d5c06a45b8a129ce1a

switch to windows docker contrainer
docker images

C:\Workarea\Docker\pnp-docker>docker images
REPOSITORY                   TAG                              IMAGE ID            CREATED             SIZE
<none>                       <none>                           6f6605140500        42 hours ago        18.8GB
hello-world                  latest                           42514ac01c56        2 weeks ago         251MB
microsoft/dotnet-framework   3.5-sdk-windowsservercore-1709   9b230679c80b        9 months ago        14.4GB
buildtools2017native         latest                           9b230679c80b        9 months ago        14.4GB

run docker localhost:

C:\Workarea\Docker>docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
ee446884f7be: Already exists                                                                                       8b4475a48151: Already exists                                                                                       7c57688e630a: Already exists                                                                                       Digest: sha256:9572f7cdcee8591948c2963463447a53466950b3fc15a247fcad1917ca215a2f
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.


C:\Workarea\Docker>docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              42514ac01c56        8 days ago          251MB

you can install and run ubuntu 
C:\Workarea\Docker>docker run -it ubuntu
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
5c939e3a4d10: Pull complete                                                                                        c63719cdbe7a: Pull complete                                                                                        19a861ea6baf: Pull complete                                                                                        651c9d2d6c4f: Pull complete                                                                                        Digest: sha256:8d31dad0c58f552e890d68bbfb735588b6b820a46e459672d96e585871acc110
Status: Downloaded newer image for ubuntu:latest
root@6b5eb08e7061:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var

**********************************************
could find thousands docker image from docker hub.
https://hub.docker.com/search?q=&type=image

search msbuilder at hub

https://hub.docker.com/r/chemsorly/msbuilder
Github: https://github.com/Chemsorly/Msbuilder

create folder C:\Workarea\Docker\Chemsorly\dcokercpp
cd C:\Workarea\Docker\Chemsorly\dcokercpp
create Dockerfile
notepad C:\Workarea\Docker\Chemsorly\dcokercpp

FROM chemsorly/msbuilder:latest
SHELL ["powershell"]
COPY . 'C:\\build\\'  
WORKDIR 'C:\\build\\'
RUN ["nuget.exe", "restore"]  
RUN & msbuild PROJECTNAME.sln 

C:\Workarea\Docker\Chemsorly\dcokercpp>docker build -t docker-cpp .

C:\Workarea\Docker\Chemsorly\dcokercpp>docker build -t docker-cpp-msmuilder .
Sending build context to Docker daemon  17.85MB
Step 1/6 : FROM chemsorly/msbuilder:latest
latest: Pulling from chemsorly/msbuilder
65014b3c3121: Downloading [>  ]  2.702MB/1.535GB                        
0e787b79aad1: Pulling fs layer                                                                                          
18c1a5e515d9: Pulling fs layer                                                                                          
6b9d79999cab: Waiting ...

C:\Workarea\Docker\Chemsorly\dcokercpp>docker run dockercpp .

********************************
https://docs.microsoft.com/en-us/visualstudio/install/build-tools-container?view=vs-2019
Install Build Tools into a container

create C:\Workarea\Docker\BuilderTools
cd C:\Workarea\Docker\BuilderTools

create C:\Workarea\Docker\BuilderTools\Dockerfile

################

# escape=`

# Use the latest Windows Server Core image with .NET Framework 4.8.
FROM mcr.microsoft.com/dotnet/framework/sdk:4.8-windowsservercore-ltsc2019

# Restore the default Windows shell for correct batch processing.
SHELL ["cmd", "/S", "/C"]

# Download the Build Tools bootstrapper.
ADD https://aka.ms/vs/16/release/vs_buildtools.exe C:\TEMP\vs_buildtools.exe

# Install Build Tools excluding workloads and components with known issues.
RUN C:\TEMP\vs_buildtools.exe --quiet --wait --norestart --nocache `
    --installPath C:\BuildTools `
    --all `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.10240 `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.10586 `
    --remove Microsoft.VisualStudio.Component.Windows10SDK.14393 `
    --remove Microsoft.VisualStudio.Component.Windows81SDK `
 || IF "%ERRORLEVEL%"=="3010" EXIT 0

# Start developer command prompt with any other commands specified.
ENTRYPOINT C:\BuildTools\Common7\Tools\VsDevCmd.bat &&

# Default to PowerShell if no other command specified.
CMD ["powershell.exe", "-NoLogo", "-ExecutionPolicy", "Bypass"]

###################

docker build -t buildtools2019:latest -m 2GB .

************************************

https://blog.alexellis.io/3-steps-to-msbuild-with-docker/
3 Steps to MSBuild with builder

https://github.com/alexellis/guidgenerator-aspnet

1. MSBuild in a Docker container
get docker msbuilder image from hub.
C:\Workarea\Docker>docker pull alexellisio/msbuild:12.0
12.0: Pulling from alexellisio/msbuild
9c7f9c7d9bc2: Pull complete                                                                                             
3d304acab3f9: Pull complete                                                                                             
5a0195ad41c3: Pull complete                                                                                             
ef7398e23fcd: Pull complete                                                                                             
699fb2ad722e: Pull complete                                                                                             
7946ab81445f: Pull complete                                                                                             
46e653acb826: Pull complete                                                                                             
d2b397df087b: Pull complete                                                                                             
aa8896a34f94: Pull complete                                                                                             
3bb9bf153fbc: Pull complete                                                                                             
b63c5c9d29c8: Pull complete                                                                                             
Digest: sha256:f6691c4894c58a37769981b2f645006412e99c7723baf80381de33a2ddb436c0
Status: Downloaded newer image for alexellisio/msbuild:12.0
docker.io/alexellisio/msbuild:12.0

C:\Workarea\Docker>docker images
REPOSITORY                   TAG                              IMAGE ID            CREATED             SIZE
<none>                       <none>                           6f6605140500        47 hours ago        18.8GB
hello-world                  latest                           42514ac01c56        2 weeks ago         251MB
buildtools2017native         latest                           9b230679c80b        9 months ago        14.4GB
microsoft/dotnet-framework   3.5-sdk-windowsservercore-1709   9b230679c80b        9 months ago        14.4GB
alexellisio/msbuild          12.0                             8f9e52119f4f        3 years ago         7.85GB

2. Add your solution
C:\Workarea\Docker>cd C:\Workarea\Docker\guidgenerator-aspnet

C:\Workarea\Docker\guidgenerator-aspnet>docker build -t guid-generator-asssets .
Sending build context to Docker daemon  98.27MB
Step 1/8 : FROM microsoft/iis:10.0.14393.206
10.0.14393.206: Pulling from microsoft/iis
9c7f9c7d9bc2: Already exists                                                                                            081af1807c20: Pull complete                                                                                             552bd0bc6fa3: Pull complete                                                                                             0964ce0f4e6c: Pull complete                                                                                             Digest: sha256:a01255e4888cae302eb9d8833bf4f0e397468242faffde5eb748d8823899d6ba
Status: Downloaded newer image for microsoft/iis:10.0.14393.206
 ---> 6e30590a2139
Step 2/8 : SHELL ["powershell"]
 ---> Running in 64f736cb99a4
Removing intermediate container 64f736cb99a4
 ---> cc7c1f7f9fac
Step 3/8 : RUN Install-WindowsFeature NET-Framework-45-ASPNET ;     Install-WindowsFeature Web-Asp-Net45
 ---> Running in 00655fce1c55

Success Restart Needed Exit Code      Feature Result
------- -------------- ---------      --------------
True    No             Success        {ASP.NET 4.6}
True    No             Success        {Application Development, ASP.NET 4.6,...


Removing intermediate container 00655fce1c55
 ---> 3a5ed80314f1
Step 4/8 : COPY GuidGenerator GuidGenerator
 ---> c3a4b1f537d6
Step 5/8 : RUN Remove-WebSite -Name 'Default Web Site'
 ---> Running in 8d3569fb5b77
Removing intermediate container 8d3569fb5b77
 ---> ae4dc53d8a16
Step 6/8 : RUN New-Website -Name 'guidgenerator' -Port 80     -PhysicalPath 'c:\GuidGenerator' -ApplicationPool '.NET v4.5'
 ---> Running in 8b1a5bb98362
The command 'powershell New-Website -Name 'guidgenerator' -Port 80     -PhysicalPath 'c:\GuidGenerator' 
-ApplicationPool '.NET v4.5'' returned a non-zero code: 
4294967295: failed to shutdown container: container 8b1a5bb983629514738b4ef3c5a6153b1b9623eeceac1957f6c3260d9fedd135 
encountered an error during Shutdown: failure in a Windows system call: The connection with the virtual machine 
or container was closed. (0xc037010a)
--------------------------------------- 

docker build --build-arg HTTP_PROXY=%HTTP_PROXY% --build-arg HTTPS_PROXY=%HTTPS_PROXY% -f build.Dockerfile -t guid-generator-assets .

docker create --name guid-generator-assets-1 guid-generator-assets

docker cp guid-generator-assets-1:C:\\build\\GuidGenerator\\bin .\\GuidGenerator\bin
docker rm guid-generator-assets-1

docker build -f Dockerfile -t guid-generator:0.1 .

**********************************************************  
pull images from docker repository https://hub.docker.com/_/postgres
  
Supported tags and respective Dockerfile links
12.1, 12, latest
12.1-alpine, 12-alpine, alpine
11.6, 11
11.6-alpine, 11-alpine

10.11, 10
10.11-alpine, 10-alpine
9.6.16, 9.6, 9  
  
Download image from docker hub command

docker pull postgres

C:\Workarea\SmileBuilder\sdc-SmileBuilder>docker pull postgres
Using default tag: latest
latest: Pulling from library/postgres
no matching manifest for windows/amd64 10.0.18362 in the manifest list entries

https://devblogs.microsoft.com/cppblog/using-msvc-in-a-docker-container-for-your-c-projects/
Using MSVC in a Docker Container for Your C++ Projects

************************************************
Create C++, java, vcpkg (thrid pary libs) builder in docker container.
************************************************

Docker files:

# escape=`
FROM mcr.microsoft.com/dotnet/framework/sdk:latest
# pull (incstall) micorsoft windows system sdk to container

# Labels ----------------------------------------------------------------------
LABEL description="Build environment for c++, java, vcpkg ... conbain applcation" 

#-----------------------------------------------------------------------------#
#   Several build arguments can be used to avoid downloading several of the   #
#   environmental and build tools. Otherwise, we download safe defaults.      #
#-----------------------------------------------------------------------------#
ARG AWSCLI_MSI="https://s3.amazonaws.com/aws-cli/AWSCLI64PY3.msi"
ARG GIT_EXE="https://github.com/git-for-windows/git/releases/download/v2.24.0.windows.2/Git-2.24.0.2-64-bit.exe"
ARG AMAZON_CORRETTO_MSI="https://d3pxv6yz143wms.cloudfront.net/8.232.09.1/amazon-corretto-8.232.09.1-windows-x64.msi"
ARG GRADLE_ZIP="https://services.gradle.org/distributions/gradle-6.0-bin.zip"
ARG CMAKE_MSI="https://cmake.org/files/v3.14/cmake-3.14.6-win64-x64.msi"
ARG VS_BUILD_TOOLS_EXE="https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16"
ARG VCPKG_ZIP="https://vcpkg.s3.us-east-2.amazonaws.com/vcpkg/vcpkg.zip"

#SHELL ["powershell", "-version", "3.0", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]
SHELL ["powershell"]

#container using powershell
#-----------------------------------------------------------------------------#
#     It is expected that the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY     #
#     environment variables will be set when the container is run.            #
#-----------------------------------------------------------------------------#

# Create destination for tools ------------------------------------------------
RUN md "C:\code" ; `
    md "C:\downloads" ; `
    md "C:\tools"
WORKDIR C:\downloads

# Install Amazon CLI ----------------------------------------------------------
ADD ${AWSCLI_MSI} aws.msi
RUN Start-Process aws.msi -ArgumentList '/passive /norestart' -Wait ; `
#    Remove-Item aws.msi

# Install Git -----------------------------------------------------------------
ADD ${GIT_EXE} git.exe
RUN Start-Process git.exe -ArgumentList '/silent /suppressmsgboxes /norestart' -Wait ; `
#    Remove-Item git.exe

# Install Amazon Corretto JDK -------------------------------------------------
ADD ${AMAZON_CORRETTO_MSI} jdk.msi
RUN Start-Process jdk.msi -ArgumentList '/passive /norestart' -Wait ; `
#    Remove-Item jdk.msi
ENV JAVA_HOME="C:\Program Files\Amazon Corretto\jdk1.8.0_232"

# Install Gradle --------------------------------------------------------------
ADD ${GRADLE_ZIP} gradle.zip
RUN Expand-Archive -Path gradle.zip -DestinationPath C:\tools\ ; `
#    Remove-Item gradle.zip
ENV GRADLE_HOME="C:\tools\gradle-6.0"

# Install CMake ---------------------------------------------------------------
ADD ${CMAKE_MSI} cmake.msi
RUN Start-Process cmake.msi -ArgumentList '/passive /norestart' -Wait ; `
#    Remove-Item cmake.msi

# Install Visual Studio 2019 Build Tools --------------------------------------
ADD ${VS_BUILD_TOOLS_EXE} vs_buildtools.exe
RUN Start-Process vs_buildtools.exe -ArgumentList '--quiet --wait --norestart --nocache --add Microsoft.VisualStudio.Workload.VCTools --includeRecommended --includeOptional' -Wait ; `
#    Remove-Item vs_buildtools.exe

# Install VCPKG ---------------------------------------------------------------
ADD ${VCPKG_ZIP} vcpkg.zip
RUN Expand-Archive -Path vcpkg.zip -DestinationPath C:\tools\ #; Remove-Item vcpkg.zip
ENV VCPKG_DIR="C:\tools\vcpkg"
ENV VCPKG_DEFAULT_TRIPLET="x64-windows"
WORKDIR C:\tools\vcpkg
#RUN .\vcpkg.exe integrate remove ; .\vcpkg.exe integrate install

# Update PATH environment -----------------------------------------------------
ENV PATH="C:\Program Files\Amazon\AWSCLI\bin;${JAVA_HOME}\bin;${GRADLE_HOME}\bin;C:\Program Files\Git\bin;C:\Program Files\CMake\bin;${VCPKG_DIR};${PATH}"

# Set CWD to code path --------------------------------------------------------
WORKDIR C:\code

#ENTRYPOINT "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools\VsDevCmd.bat"
#CMD is using entry container terminal to run >docker run  -it buildertools cmd 

# build this docker iamge with mount host folders c:\code and c:\project  to run > docker build -t buildertool






















