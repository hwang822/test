
xCreate AWS Account at
https://aws.amazon.com
hw2kem_Dl@00
12 month free.
10$/mo

build 4 redhat server instances

server_master   ec2-18-221-73-174.us-east-2.compute.amazonaws.com  (18.221.73.174)
server_db       ec2-18-218-43-72.us-east-2.compute.amazonaws.com (18.218.43.72)
server_app      ec2-18-220-200-56.us-east-2.compute.amazonaws.com (18.220.200.56)
server_web      ec2-18-220-88-71.us-east-2.compute.amazonaws.com  (18.220.88.71)
server_ansible  ec2-18-220-72-179.us-east-2.compute.amazonaws.com (18.220.72.179)

Create 5 Elastic IPS and assocate to servers.

password: demokey.pem  (create ssh key file and save at client local)

connect PutTTY client or VMware


Putty:
Download and install Putty and PuttyGen
Run PuttyGen load key file demokey.pem and generat new putty accepted key file demokey_putty.ppk

Prun Putty to create 4 sesions
Saved Session: server_master
Session\Host Name: ec2-18-221-73-174.us-east-2.compute.amazonaws.com
Saved Session: server_app
Session\Host Name: ec2-18-220-200-56.us-east-2.compute.amazonaws.com
Saved Session: server_db
Session\Host Name: ec2-18-218-43-72.us-east-2.compute.amazonaws.com
Saved Session: server_web
Session\Host Name: ec2-18-220-88-71.us-east-2.compute.amazonaws.com
Saved Session: server_ansible
Session\Host Name: ec2-18-220-72-179.us-east-2.compute.amazonaws.com

Connection\Data\Auto-lonin username: ec2-user
Connection\SSH\Auth: Browse from C:\Hwang\AWS\demokey_putty..ppk
Save and Open
Laod and open all essions.


hostnamectl set-hostname "server_master"
user name: ec2_user
set default user ec2_user new password.
passwd ec2-user
new password: test
retype password: test

set root password of all servers.
sudo su
passwd:
new password: root
retype password: root

vi /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
172.31.16.166   server_master
172.31.27.228   server_web
172.31.46.51    server_db
172.31.17.202   server_app
172.31.38.207   server_ansible
save and copy to all servers /etc/


create ssh-key at server_ansible and copy to all other server.
[ec2-user@server_ansible ~]$ ssh-keygen
[ec2-user@server_ansible ~]$ sudo ssh-copy-id server_app

need vi /etc/ssh/sshd_config and change
PasswordAuthentication yes
#PermitEmptyPasswords no
#PasswordAuthentication no
systemctl restart sshd

***********
Install Ansible
*********
go to https://www.tecmint.com/how-to-enable-epel-repository-for-rhel-centos-6-5/an

## RHEL/CentOS 7 64-Bit ##
# wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
# rpm -ivh epel-release-latest-7.noarch.rpm

download epel-release 

first install wget package for downlaod repository
[ec2-user@server_ansible ~]$ sudo yum install wget
[ec2-user@server_ansible ~]$ wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
[ec2-user@server_ansible ~]$ rpm -ivh epel-release-latest-7.noarch.rpm

[ec2-user@server_ansible ~]$ cd /etc/yum.repos.d/
[ec2-user@server_ansible yum.repos.d]$ ll
total 28
-rw-r--r--. 1 root root  951 Oct  2 17:44 epel.repo
-rw-r--r--. 1 root root 1050 Oct  2 17:44 epel-testing.repo
-rw-r--r--. 1 root root  607 Mar 27 14:13 redhat-rhui-client-config.repo
-rw-r--r--. 1 root root 8679 Mar 27 14:13 redhat-rhui.repo
-rw-r--r--. 1 root root   80 Mar 27 14:13 rhui-load-balancers.conf

epel.repo is avaliable

could install  sudo yum install ansible -y


[ansibleuser@server_ansible ~]$ ansible --version
ansible 2.4.2.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = [u'/home/ansibleuser/.ansible/plugins/modules', u'/usr/share/ansible/plugins/modules']
  ansible python module location = /usr/lib/python2.7/site-packages/ansible
  executable location = /usr/bin/ansible
  python version = 2.7.5 (default, May  3 2017, 07:55:04) [GCC 4.8.5 20150623 (Red Hat 4.8.5-14)]
[ansibleuser@server_master ~]$ cd /etc/ansible/
[ansibleuser@server_master ansible]$ ls
ansible.cfg  hosts  roles

[ec2-user@server_ansible ansible]$ sudo vi hosts
[server_web]
172.31.27.228
[server_app]
172.31.17.202
[server_db]
172.31.46.51

[ec2-user@server_ansible ~]$ ansible all --list-hosts
  hosts (3):
    172.31.46.51
    172.31.27.228
    172.31.17.202

[ec2-user@server_ansible ~]$ ansible all -m ping
172.31.17.202 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
172.31.27.228 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}
172.31.46.51 | SUCCESS => {
    "changed": false,
    "ping": "pong"


only need talk to server_web

[ec2-user@server_ansible]$ ansible server_web -m ping
172.31.27.228 | SUCCESS => {
    "changed": false,
    "ping": "pong"
}

[ec2-user@server_ansible]$ ansible all -m command -a "uptime"
172.31.27.228 | SUCCESS | rc=0 >>
 15:49:24 up 16:31,  2 users,  load average: 0.00, 0.01, 0.04

172.31.46.51 | SUCCESS | rc=0 >>
 15:49:24 up 16:31,  2 users,  load average: 0.00, 0.01, 0.05

172.31.17.202 | SUCCESS | rc=0 >>
 15:49:24 up 16:30,  2 users,  load average: 0.00, 0.01, 0.04

Create playbook to run tasks and ansible.

mkdir cd playbooks

[ec2-user@server_ansible playbooks]$ vi test.yml
---
- name: test of servers
  hosts: 127.0.0.1
  connection: local
  tasks:

run tasks.

[ec2-user@server_ansible playbooks]$ ansible-playbook test.yml

PLAY [test of servers] ******************************************************************************************

TASK [Gathering Facts] ******************************************************************************************
ok: [127.0.0.1]

PLAY RECAP ******************************************************************************************************
127.0.0.1                  : ok=1    changed=0    unreachable=0    failed=0

[ec2-user@server_ansible playbooks]$ vi test.yml
[ec2-user@server_ansible playbooks]$ ansible-playbook test.yml

PLAY [test of servers] ******************************************************************************************

TASK [Gathering Facts] ******************************************************************************************
ok: [127.0.0.1]

PLAY RECAP ******************************************************************************************************
127.0.0.1                  : ok=1    changed=0    unreachable=0    failed=0

******************
ansible install a instance at AWS
*****************

at one linux server (server_ansible)
mkdir kyes
vi /keys/demokey.pem
copy key pair key to file and save.

[ec2-user@server_ansible ~]$ sudo chmod 400 keys/demokey.pem

*************************
AWS EBS (EC2 Black Storage)
*************************

An Amazon EBS volume is a durable, block-level storage device that you can attach to a single EC2 instance.
EBS types:

                  Solid-State Drives (SSD)                                      Hard disk Drives (HDD)
Volume Type     General Purpose SSD (gp2)*    Provisioned IOPS SSD (io1)     Throughput Optimized HDD (st1)  Cold HDD (sc1) 


*********
Install AWS cli  (AWS command line interface)
**********
after install aws cli in windows you could run aws from cmd.

install aws cli in linux vms
first need install python for pip module to install aws cli.
install 

first install wget package for downlaod repository
[ec2-user@server_ansible ~]$ sudo yum install wget
[ec2-user@server_ansible ~]$ wget http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
[ec2-user@server_ansible ~]$ rpm -ivh epel-release-latest-7.noarch.rpm
[ec2-user@server_ansible ~]$ sudo yum repolist
[ec2-user@server_ansible ~]$ sudo yum install python-pip
[ec2-user@server_ansible ~]$ rpm -qa | grep pip
libpipeline-1.2.3-3.el7.x86_64
python2-pip-8.1.2-5.el7.noarch

[ec2-user@server_ansible ~]$ pip list
ansible (2.4.2.0)
Babel (0.9.6)
backports.ssl-match-hostname (3.4.0.2)
cffi (1.6.0)
chardet (2.2.1)
cloud-init (0.7.9)
configobj (4.7.2)
cryptography (1.7.2)
decorator (3.4.0)
enum34 (1.0.4)
ethtool (0.8)
httplib2 (0.9.2)
idna (2.4)
iniparse (0.4)
ipaddress (1.0.16)
IPy (0.75)
Jinja2 (2.7.2)
jmespath (0.9.0)
jsonpatch (1.2)
jsonpointer (1.9)
kitchen (1.1.1)
lxml (3.2.1)
M2Crypto (0.21.1)
Magic-file-extensions (0.2)
MarkupSafe (0.11)
paramiko (2.1.1)
pciutils (1.7.3)
perf (0.1)
pip (8.1.2)
ply (3.4)
policycoreutils-default-encoding (0.1)
prettytable (0.7.2)
pyasn1 (0.1.9)
pycparser (2.14)
pycrypto (2.6.1)
pycurl (7.19.0)
pygobject (3.22.0)
pygpgme (0.3)
pyliblzma (0.5.3)
pyOpenSSL (0.13.1)
pyserial (2.6)
python-dateutil (1.5)
python-dmidecode (3.12.2)
python-keyczar (0.71rc0)
python-linux-procfs (0.4.9)
pyudev (0.15)
pyxattr (0.5.1)
PyYAML (3.10)
requests (2.6.0)
rhnlib (2.5.65)
rhsm (1.19.10)
schedutils (0.4)
seobject (0.1)
sepolicy (1.1)
setuptools (0.9.8)
six (1.9.0)
subscription-manager (1.19.23)
urlgrabber (3.10)
urllib3 (1.10.2)
yum-metadata-parser (1.1.4)
You are using pip version 8.1.2, however version 9.0.3 is available.
You should consider upgrading via the 'pip install --upgrade pip' command.


[ec2-user@server_ansible ~]$ sudo pip install awscli botocore
Collecting awscli
  Downloading awscli-1.14.69-py2.py3-none-any.whl (1.2MB)
    100% |████████████████████████████████| 1.2MB 904kB/s


[ec2-user@server_ansible ~]$ pip list awscli
ansible (2.4.2.0)
awscli (1.14.69)
botocore (1.9.22)     (lower level interface for aws).
...


[ec2-user@server_ansible ~]$ aws
usage: aws [options] <command> <subcommand> [<subcommand> ...] [parameters]
To see help text, you can run:

  aws help
  aws <command> help
  aws <command> <subcommand> help
aws: error: too few arguments

get key from aws console management "My Security Credentials" and down load file rootkey to local.

[ec2-user@server_ansible ~]$ aws configure
AWS Access Key ID [None]: AWSAccessKeyId= from rootkey file
AWS Secret Access Key [None]: AWSSecretKey= from rootkey file
Default region name [None]: us-east-2c
Default output format [None]: text


config aws cli to connect to aws api.






