ASP.NET Core Crash Course - C# App

https://www.youtube.com/watch?v=BfEjDD8mWYg

Create Test webapp broject type ASP.NET Core Web App (Model-View-Controller)
Select Autherticaltion type -> Individual Account

Build scussfull
At view could see Sql Server Explorer 
Select Run at IIS Express home page 
Build and launch JokeAppWeb at web browser 
https://localhost:44360/

*****************
JokeAppWeb  Home Privacy           Register Login        
Welcome 
Learn about building Web apps with ASP.NET Core.
*****************
Add models folder add JokeApp class with properties. 
namespace JokeWebApp.Models
{
	public class JokeApp
	{

        [Required]
        public int Id { get; set; }

        [Required]
        [DisplayName("Joke Question")]

        public string JokeQuestion { get; set; }

        [Required]
        [DisplayName("Joke Answer")]
        public string JokeAnswer { get; set; }


	}
}

***********************************
Add MVC Controller with views, using Enity Framwrlk

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using JokeWebApp.Data;
using JokeWebApp.Models;

namespace JokeWebApp.Controllers
{
    public class JokeAppController : Controller
    {
        private readonly ApplicationDbContext _context;


        public JokeAppController(ApplicationDbContext context)
        {
            _context = context;
        }

        // GET: Jokes
        public async Task<IActionResult> Index()
        {
            return View(await _context.Joke.ToListAsync());
        }

        // GET: Jokes/ShowSearchForm
        public async Task<IActionResult> ShowSearchForm()
        {
            return View();
        }

Right Click JokeAppConroler to add JokeApp View With JokeApp Model 

Right Click JokeAppConroler to add JokeApp View view files with Delete, Create, Detail, Edit, index cshtml files are created.



Need add database

*******************
Go VS\View\Other Windows\Package Manager Consoles 
Install new dependences

defatul ApplicationDbContext is avalaible 

using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using JokeWebApp.Models;

namespace JokeWebApp.Data
{
	public class ApplicationDbContext : IdentityDbContext
	{
		public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
			: base(options)
		{
		}
	    public DbSet<JokeWebApp.Models.JokeApp> Joke { get; set; } = default!;
	    public DbSet<JokeWebApp.Models.JokeApi> JokeViewModel { get; set; } = default!;
    }
}

default db at Server=(localdb)\\mssqllocaldb file. Set database server at later

PM> add-migration "initialsetup"
Build started...
Build succeeded.
Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 6.0.28 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.28' with options: None
To undo this action, use Remove-Migration.

new files 20240319185233_initialsetup.cs created under PDSESWebApp\Data\Migrations\20240319185233_initialsetup.cs

It is database schame

namespace JokeWebApp.Data.Migrations
{
    /// <inheritdoc />
    public partial class initialsetup : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Joke",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    JokeQuestion = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    JokeAnswer = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Joke", x => x.Id);
                });
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Joke");
        }
    }
}


O ject Relation Mapper (ORM) Mapping Model class JokeApp to db table StudentParent
Traditon way DAO

Run PM> update-database
two tables are created User, Joke
Could view at SQL server object exploer

Run https://localhost:7268/JokeApp again
Could see page
JokeAppWeb Home Privacy         Register    Login
Index
Create New
Name	Infomation

Click Create New Button

Create
Joke
Joke Question
Joke Answer
Back to List

***************
Test Create, Exit, Delete, Detail button

Edit
Joke
Joke Question
Who is Henry?
Joke Answer
Not me.
Back to List

Details
Joke
Joke Question
Who is Henry?
Joke Answer
Not me.
Edit | Back to List

********************
Chagne Home page in CSS, html, and bootstrap
At
StudentParent\View\Shared\Layout.cshtml
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                        </li>
                    </ul>
                    <partial name="_LoginPartial" />
                </div>

********************

Add Search item at Navgitar bar
At Views\Shared\layout.chhml
add 
    </li>
    <li class="nav-item">
        <a class="nav-link text-dark" asp-area="" asp-controller="JokeApp" asp-action="ShowSearchForm">Search</a>
    </li>

At JokeAppController
add 
        // GET: JokeApp/Search
        public async Task<IActionResult> Search()
        {
            return View();
        }

At JokeAppControl\view
add Search.cs
    Right click JokeAppControl Search to add Razor View.
View Name: Search
Template" Create
Model Class: Models.JokeApp
Options: Create as a partial view

<h4>Seach Student Parent</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Results">
            <div class="form-group">
                <label for="SearchPhrase" class="control-label"></label>
                <input name="SearchPhrase" class="form-control" />
            </div>
            <div class="form-group">
                <input type="submit" value="Search" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

Add Search Results Control Method for asp-action="Results" 

// POST: JokeAppController/Results
        public async Task<IActionResult> Results(String searchPhrase)
        {
            return View("Index", await _context.StudentParent.Where( j => j.Name.Contains
            (searchPhrase)).ToListAsync());
        }

****************
Add required Log In function

Add Authorize function to JokeAppController.cs
using Microsoft.AspNetCore.Authorization;
[Authorize]

******************************


create new database todoappDB at SQL Server HWNAG-LENOVO

change connection string at appsettings.json

  "ConnectionStrings": {
    //wokring at local database SQLServerExpress file SQLServer mssqllocaldb and table scame Database=aspnet-JokeWebApp-6d90364e-91b9-4811-90ac-3ed177714396;
    //"DefaultConnection": "Server=(localdb)\\mssqllocaldb;Database=aspnet-JokeWebApp-6d90364e-91b9-4811-90ac-3ed177714396;Trusted_Connection=True;MultipleActiveResultSets=true",
    //wokring at SQLServer at HWANG-LENOVO table todoappDB; need table scame MenuContext.cs  update-database at project mnager console
    "DefaultConnection": "Server=HWANG-LENOVO;Database=todoappDB;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=true"

Create three models Dish.cs, Ingredient.cs and DishIngredient.cs
Create MenuContext.cs

run view\Other Windows\Pack Manager Console 
PM> Add-Migration firstMigration
It will migrate and ApplicationDbContext.cs (joke) MenuContext.cs (dish, ingerdient, dishingerdient) to thress table schames 

PM> update-database

Build started...
Build succeeded.
Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (12ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT 1
      ...
      Done.
PM> 

It will using schames to create database tables in DB

***********************************
https://www.youtube.com/watch?v=b8fFRX0T38M

.NET 8 Web API & Entity Framework 🚀 Full CRUD Course (with Code-First Migrations & SQL Server)


Create web API using .net core, EF 

Add new ASP.NET Core Web API project at DNetCoreWebAppAndApi.sln

Add new api controller (Empty) at JokeWebApi project

namespace JokeWebApi.Controllers
{
namespace JokeWebApi.Controllers
{


    [Route("api/[controller]/[action]")]
    [ApiController]
    public class JokesController : ControllerBase
    {
        [HttpGet]
        public async Task<ActionResult<List<Joke>>> GetAllJokes()
        {
            var jokes = new List<Joke>{
                new Joke
                {
                    Id = 1,
                    JokeQuestion = "Who is John?",
                    JokeAnswer = "He is a dog"
                }
            };
            return Ok(jokes);
        }
    }
}

to ring up Swagger UI for API data transation

Jokes
GET
/api/Jokes/GetAllJokes

'https://localhost:7281/api/Jokes/GetAllJokes'

	
Response body
Download
[
  {
    "id": 1,
    "jokeQuestion": "Who is John?",
    "jokeAnswer": "He is a dog"
  }
]

***************************
JokeApp share api data 

https://www.youtube.com/watch?v=_TgiJR13cT4

How To Consume WEB API in ASP.NET Core MVC | ASP.NET Web API | Read Data

Add JokeApiController at JokeApp Controllers

using JokeWebApp.Models;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;

namespace JokeWebApp.Controllers
{
    public class JokeApiController : Controller
    {
        Uri baseAddress = new Uri("https://localhost:7281/api");

        private readonly HttpClient _client;

        public JokeApiController()
        {
            _client = new HttpClient();
            _client.BaseAddress = baseAddress;
        }

        [HttpGet]
        public IActionResult Index()
        {
            List<JokeApi> brandList = new List<BrandApi>();
            HttpResponseMessage respone = _client.GetAsync(_client.BaseAddress + "/Jokes/GetAllJokes").Result;
            //api url action format  [Route("api/[controller]/[action]")] 

            if (respone.IsSuccessStatusCode)
            {
                string data = respone.Content.ReadAsStringAsync().Result;
                brandList = JsonConvert.DeserializeObject<List<JokeApi>>(data);
            }
            return View(brandList);
        }
    }
}

Right cleck JokeApiController to
Add JokeApi View at Views folder with JokeApi model

using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace JokeWebApp.Models
{
    public class JokeApi
    {
        public int Id { get; set; }

        [Required]
        [DisplayName("Joke Question")]

        public string JokeQuestion { get; set; }

        [Required]
        [DisplayName("Joke Answer")]
        
        public string JokeAnswer { get; set; }

    }
}

Test run https://localhost:7268/JokeApi

will see data from api

JokeWebApp
Home
Privacy
JokeApp
JokeApi
Search
Register
Login
Create New

Joke Question	Joke Answer	
Who is John?	He is a dog	Edit | Details | Delete

***********************

https://www.youtube.com/watch?v=Fp6s89A136Q
Asp.Net Core Web API - CRUD operations in REST API using Entity Framework Core and SQL Server

Create Models\Brands.cs

namespace JokeWebApi.Models
{
    public class Brands
    {
        public int Id { get; set; }
        public string? Name { get; set; }
        public string Category { get; set; }
        public int IsActive { get; set; }

    }
}

add Microsoft.EntityFrameworkCore to Api project

Creates Models\BrandContext.cs

{
    public class BrandContext : DbContext
    {
        public BrandContext(DbContextOptions<BrandContext> options) : base(options)
        {
            
        }

        public DbSet<Brands> Brands {  get; set; }
        
    }
}

add db connection string to appsetings.json
    "DefaultConnection": "Server=HWANG-LENOVO;Database=todoappDB;Trusted_Connection=True;TrustServerCertificate=True;MultipleActiveResultSets=true"




// Add services to the container to Api/Program.
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection") ?? throw new InvalidOperationException("Connection string 'DefaultConnection' not found.");
    builder.Services.AddDbContext<BrandContext>(options =>
        options.UseSqlServer(connectionString));

    var app = builder.Build();

Build and run api

Go to View\Other Windows\Package Manager Console

PM>  add-migration initial
Build started...
Build succeeded.
To undo this action, use Remove-Migration.
PM> 

build database schame

PM> update-database
Build started...
Build succeeded.
Microsoft.EntityFrameworkCore.Database.Command[20101]
      Executed DbCommand (13ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT 1

will create new database Brands

Will see database Brands
Id	Name	Category	IsActive

Add BrandController
with Get, Post,...

Build Run

Click Post Brand

{
  "id": 0,
  "name": "Apple IPhone",
  "category": "Mobile Phone",
  "isActive": 1
}

Execut

Crate a data a db table

Id	Name	Category	IsActive
1	Apple   IPhone	    Mobile Phone	1


{
  "id": 0,
  "name": "Huaiwek IPhone",
  "category": "Mobile Phone",
  "isActive": 1
}

Execut

Crate another data a db table

Id	Name	        Category	    IsActive
1	Apple IPhone	Mobile Phone	1
2	Huaiwei Phone	mobile phone	1


Click Get Brands

	
Response body
Download
[
  {
    "id": 1,
    "name": "Apple IPhone",
    "category": "Mobile Phone",
    "isActive": 1
  },
  {
    "id": 2,
    "name": "Huaiwei Phone",
    "category": "mobile phone",
    "isActive": 1
  }
]

********************************

.NET : API Security: A Comprehensive Guide to Safeguarding Your APIs with API Keys

https://www.youtube.com/watch?v=XabkK84CKI8


