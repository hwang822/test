Interview Q&A

❤C# Q&A

A class has several types of 
members, constructors, fields, properties, methods, delegates, and events.

Abstraction, Encapsulation, Polymorphism, and Inheritance.
Encapsulation: Hide implementation details with public, private, protect.
Polymorphism - Overriding baseClass Methods in derivedClass metohods.
Inheritance - Derived class inheritanced from base class. Class derivedClass : baseClass{} 

😊Abstract Class vs Interface
both are the process of hiding certain details and showing only essential information to the user.

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):

interface TestInterface  
{  //no impletation 
    void getMethod();  // interface method (does not have a body)
    string getName();  //divered class have to impletation
}   

abstract class TestAbstractClass  
{  //has member and constractor. no impletation, divered class have to impletation override the method 
    int i = 4;  
    int k = 3;  
    //An abstract class can have both abstract and regular methods:
    public abstract void getClassName();
    public void getClassMyName(){
      return;
    }
}  


CLR
Managed code: the object creation, memory allocation, and object disposal is managed by the Common Language Runtime.
Unmanaged Code: The object creation, execution, and disposal of unmanaged code is directly managed by the programmers.

😊What is Boxing and Unboxing in C#? 
 
Boxing and Unboxing both are used for type conversions.
 
The process of converting from a value type to a reference type is called boxing. Boxing is an implicit conversion. Here is an example of boxing in C#.
// Boxing  
int anum = 123;  
Object obj = anum;  
Console.WriteLine(anum);  
Console.WriteLine(obj); 
The process of converting from a reference type to a value type is called unboxing. Here is an example of unboxing in C#.
// Unboxing  
Object obj2 = 123;  
int anum2 = (int)obj;  
Console.WriteLine(anum2);  
Console.WriteLine(obj);  

😊What is the difference between a struct and a class in C#?  
Class and struct are both user-defined data types, but have some major differences:
 
Struct
The struct is a value type in C# and it inherits from System.Value Type.
Struct is usually used for smaller amounts of data.
Struct can’t be inherited from other types.
A structure can't be abstract.
No need to create an object with a new keyword.
Do not have permission to create any default constructor.
Class
The class is a reference type in C# and it inherits from the System.Object Type.
Classes are usually used for large amounts of data.
Classes can be inherited from other classes.
A class can be an abstract type.
We can create a default constructor.

😊What are delegates in C# and the uses of delegates?
Treat a function as data. Delegates allow functions to be passed as parameters, returned from a function as a value
Delegate is a class that is used to create and invoke delegates at runtime.

namespace Delegates  
{  
    // Delegate Definition  
    public delegate int operation(int x, int y);  
         
    class Program  
    {  
        // Method that is passes as an Argument  
        // It has same signature as Delegates   
        static int Addition(int a, int b)  
        {  
            return a + b;  
        }  
  
        static void Main(string[] args)  
        {  
            // Delegate instantiation  
            operation obj = new operation(Program.Addition);  
   
            // output  
            Console.WriteLine("Addition is={0}",obj(23,27));   
            Console.ReadLine();    
        }  
    }  
}  

😊What are sealed classes in C#?
    sealed classed can not be inherited

😊 What are partial classes?
    could define multiple methods in with same class name in diffrenct class body.

😊What’s the difference between the Array.CopyTo() and Array.Clone()?
    Array.Clone copy each items shallow copy object
    Array.CopyTo is copy all daata and object to another deepcopy object

😊What are Singleton Design Patterns and how to implement them in
    Ensures a class has only one instance and provides a global point of access to it.

😊What are Indexers in C#?
    as Indexers which are used for treating an object as an array

😊What are Different Ways a Method can be Overloaded?
    a method with the same name but different signatures based on the number and type of parameters and return values.
 
😊What are Generics in C#?
    generics class or method can work with any data type.
  
😊What is a Virtual Method in C#?
    A virtual method is a method that can be redefined in derived classes  
  
😊How do you use the “using” statement in C#?  
    the using keyword to add namespaces in code-behind and class files
    using System.IO;  
    using System.Text;  

❤ASP .Net Core Q&A

😊What is the ASP.NET Core?
    ASP. NET Core is an open-source an asp.net core training cross-platform that runs on Windows, Linux, and Mac to develop modern cloud-based applications including IoT apps, Web Apps, Mobile Backends, and more.

😊What are the features provided by ASP.NET Core?
    Built-in supports for Dependency Injection
    Built-in supports for the logging framework and it can be extensible
    Introduced new, fast and cross-platform web server - Kestrel. So, a web application can run without IIS, Apache, and Nginx.
    Multiple hosting ways are supported
    It supports modularity, so the developer needs to include the module required by the application. However, .NET Core framework is also providing the meta package that includes the libraries
    Command-line supports to create, build and run the application
    There is no web.config file. We can store the custom configuration into an appsettings.json file
    There is no Global.asax file. We can now register and use the services into startup class
    It has good support for asynchronous programming
    Support WebSocket and SignalR
    Provide protection against CSRF (Cross-Site Request Forgery)

😊What are the advantages of ASP.NET Core over ASP.NET?
    It is cross-platform, so it can be run on Windows, Linux, and Mac.
    There is no dependency on framework installation because all the required dependencies are ship with our application
    ASP.NET Core can handle more request than the ASP.NET
    Multiple deployment options available withASP.NET Core

😊What is Metapackages?
    ncludes all the supported package by ASP.NET code with their dependencies into one package
    
😊 Can ASP.NET Core application work with full .NET 4.x Framework?
    Yes. ASP.NET core application works with full .NET framework via the .NET standard library.

😊What is the startup class in ASP.NET core?
    Startup class is the entry point of the ASP.NET Core application. 
 
 public class Program
 {
     public static void Main(string[] args)
     {
        CreateWebHostBuilder(args).Build().Run();
     }
 
    public static IWebHostBuilder CreateWebHostBuilder(string[] args) =>
        WebHost.CreateDefaultBuilder(args)
        .UseStartup<TestClass>();
 }
 
😊What is the use of ConfigureServices method of startup class?
    to configure the services that are used by the application. 
    
😊What is the use of the Configure method of startup class? 
    It defines how the application will respond to each HTTP request. We can configure the request pipeline by configuring the middleware. It accepts IApplicationBuilder as a parameter and also it has two optional parameters: IHostingEnvironment and ILoggerFactory. Using this method, we can configure built-in middleware such as routing, authentication, session, etc. as well as third-party middleware.
    
😊What is middleware?
    It is software which is injected into the application pipeline to handle request and responses. 
    
😊What is the difference between IApplicationBuilder.Use() and IApplicationBuilder.Run()?
    The middleware adds using IApplicationBuilder.Use may call the next middleware in the pipeline whereas the middleware adds using IApplicationBuilder.Run method never calls the subsequent ore next middleware. After IApplicationBuilder.Run method, system stop adding middleware in request pipeline.

😊What is the use of "Map" extension while adding middleware to ASP.NET Core pipeline?
    It is used for branching the pipeline. It branches the ASP.NET Core pipeline based on request path matching. If request path starts with the given path, middleware on to that branch will execute.

😊What is routing in ASP.NET Core?
    Routing is functionality that map incoming request to the route handler. 

😊How to enable Session in ASP.NET Core?
    The middleware for the session is provided by the package Microsoft.AspNetCore.Session. To use the session in ASP.NET Core application, we need to add this package to csproj file and add the Session middleware to ASP.NET Core request pipeline.

😊What are the various JSON files available in ASP.NET Core?
    There are following JSON files in ASP.NET Core :
    global.json
    launchsettings.json 
    appsettings.json
    bundleconfig.json
    bower.json
    package.json

😊What is tag helper in ASP.NET Core?
    It is a feature provided by Razor view engine that enables us to write server-side code to create and render the HTML element in view (Razor). The tag-helper is C# classes that used to generate the view by adding the HTML element. The functionality of tag helper is very similar to HTML helper of ASP.NET MVC.

😊How to specify service lifetime for register service that added as a dependency?
    ASP.NET Core allows us to specify the lifetime for registered services. 
    

❤RESTful Web Servbices (Backend) 
    https://www.guru99.com/restful-web-services.html#:~:text=Facebook%2C%20Twitter%2C%20and%20Google%20expose,these%20web%20services%20via%20REST.
    Client send HTTP protocol request vir RESTful web services host to get, put, post, delete infomration in side the resource.   
    
    😃RESTful Key Elements
    Resouce: get emplayee#1 from mixwellware http://mixwellsoftware.com/employee/1
    Request Verbs:  A brower issues request vaerbs POST, PUT, and DELETE instruct the endpoint what it wants.
    Request Headers: define the type of response required or the authorization details. example employee.
    Request Body: POST request need prvoide data body to post (create) on the web server.
    Response Body: GET request web server might return an XML document with all the details.
    Response Status codes: the response error code 2xx from the web server.
    
    😃Restful Methods:
    Browser (pc, mobile ...) to send request to any kind of RESTful resource using same web service api (facebook, google, cloud...). 
    
    😃Restful Architecture
    Client-server is the typical architecture where the server can be the web server hosting the application, and the client can be as simple as the web browser.  
    Stateless means that the state of the application is not maintained in REST. For example, if you delete a resource from a server using the DELETE command, you cannot expect that delete information to be passed to the next request.
    
    😃RESTFul Principles and Constraints
        RESTFul Client-Server: 
            Client sample as a browser to send request html format reqeust (need developer React web page if it is GUI). 
            Server run RESTful web server API to exuct the request method.
        Stateless: Client cound not sure if the request completted in the server.
        Catch: to hold client request to avoid cleint repeat send same request to server.
        Layered System: Middelware between client and endpoint of server host.
        Interface/Uniform Contract:
            POST – To create a resource on the server
            GET – To retrieve a resource from the server
            PUT – To change the state of a resource or to update it
            DELETE – To remove or delete a resource from the server
        
    😃Create a Restful web service in ASP.NET (using Visual Studio) or Java sprint
    https://www.youtube.com/watch?v=LXZnuJY0dGI
    
    https://github.com/hwang822/test/RestFulServiceAPI
    Step 1) Create new project from VS2019 
        select project type ASP.NET Web Application (.NET Framework) and project name.  
        select WCF and Web API     
        cleak Create Button
    Step 2) Go to controllers
        HomeController.cs  basic home page controller   https://localhost:44387/home
        ValuesController.cs coustom home page controller  https://localhost:44387/values(can be renamed)
        
        Right Controller to Add new API controller with read/write action and named to WeatherController.cs
            Add using RestFulServiceAPI.Models;
            to use data form models WeatherInfo
            public class WeatherController : ControllerBase
            {
                // GET: api/<WeatherController>
                [HttpGet]
                public IEnumerable<WeatherInfo> Get()
                {
                    // get to create weatherInfoList as data source
                    var weatherInfoList = new List<WeatherInfo>()

                    for (int i = 0; i < 10; i++)
                    {
                        var weatherInfo = new WeatherInfo
                        {
                            Location = $"Location {i}",
                            Degree = i * 23 / 17,
                            DateTime = DateTime.Now.ToUniversalTime()
                        };
                    }

                    return weatherInfoList;
                }

                // GET api/<WeatherController>/5
                [HttpGet("{id}")]
                public WeatherInfo Get(int id)
                {

                    return new WeatherInfo
                    {
                        Location = $"Location {id}",
                        Degree = id * 23 / 17,
                        DateTime = DateTime.Now.ToUniversalTime()
                    };
                }
            
        Right Models to add new API model named WeatherInfo.cs 
   
            using System;
            using System.Runtime.Serialization;

            namespace RestFulServiceAPI.Models
            {
                [DataContract]
                public class WeatherInfo
                {
                    [DataMember(Name = "location")]
                    public string Location { get; set; }
                    [DataMember(Name = "degree")]
                    public float Degree { get; set; }
                    [DataMember(Name = "dateTime")]
                    public DateTime DateTime { get; set; }

                }
            }
        
❤React  https://www.interviewbit.com/react-interview-questions/
    React is a front-end and open-source JavaScript library which is useful in developing user interfaces specifically for applications with a single page.
    
❤SQL Database 
    😊https://www.dnsstuff.com/how-to-increase-database-performance
    6 Tips to increase Database Performance
    1. Optimrize Queries - database performance analysis solution
    2. Improve Indexs - Indexing creates a data structure that helps keep all your data organized and makes it easier to locate information.
    3. Defragment Data - fragmentation can slow down the data retrieval
    4. Increase Memory - boost efficiency and overall performance.
    5. Strengthen CPU - 
    6. Review Access - 
    


