Interview Q&A

C# Q&A

A class has several types of 
members, constructors, fields, properties, methods, delegates, and events.

Abstraction, Encapsulation, Polymorphism, and Inheritance.
Encapsulation: Hide implementation details with public, private, protect.
Polymorphism - Overriding baseClass Methods in derivedClass metohods.
Inheritance - Derived class inheritanced from base class. Class derivedClass : baseClass{} 

😊Abstract Class vs Interface
both are the process of hiding certain details and showing only essential information to the user.

An interface is a completely "abstract class", which can only contain abstract methods and properties (with empty bodies):

interface TestInterface  
{  //no impletation 
    void getMethod();  // interface method (does not have a body)
    string getName();  //divered class have to impletation
}   

abstract class TestAbstractClass  
{  //has member and constractor. no impletation, divered class have to impletation override the method 
    int i = 4;  
    int k = 3;  
    //An abstract class can have both abstract and regular methods:
    public abstract void getClassName();
    public void getClassMyName(){
      return;
    }
}  


CLR
Managed code: the object creation, memory allocation, and object disposal is managed by the Common Language Runtime.
Unmanaged Code: The object creation, execution, and disposal of unmanaged code is directly managed by the programmers.

😊What is Boxing and Unboxing in C#? 
 
Boxing and Unboxing both are used for type conversions.
 
The process of converting from a value type to a reference type is called boxing. Boxing is an implicit conversion. Here is an example of boxing in C#.
// Boxing  
int anum = 123;  
Object obj = anum;  
Console.WriteLine(anum);  
Console.WriteLine(obj); 
The process of converting from a reference type to a value type is called unboxing. Here is an example of unboxing in C#.
// Unboxing  
Object obj2 = 123;  
int anum2 = (int)obj;  
Console.WriteLine(anum2);  
Console.WriteLine(obj);  

😊What is the difference between a struct and a class in C#?  
Class and struct are both user-defined data types, but have some major differences:
 
Struct
The struct is a value type in C# and it inherits from System.Value Type.
Struct is usually used for smaller amounts of data.
Struct can’t be inherited from other types.
A structure can't be abstract.
No need to create an object with a new keyword.
Do not have permission to create any default constructor.
Class
The class is a reference type in C# and it inherits from the System.Object Type.
Classes are usually used for large amounts of data.
Classes can be inherited from other classes.
A class can be an abstract type.
We can create a default constructor.

😊What are delegates in C# and the uses of delegates?
Treat a function as data. Delegates allow functions to be passed as parameters, returned from a function as a value
Delegate is a class that is used to create and invoke delegates at runtime.

namespace Delegates  
{  
    // Delegate Definition  
    public delegate int operation(int x, int y);  
         
    class Program  
    {  
        // Method that is passes as an Argument  
        // It has same signature as Delegates   
        static int Addition(int a, int b)  
        {  
            return a + b;  
        }  
  
        static void Main(string[] args)  
        {  
            // Delegate instantiation  
            operation obj = new operation(Program.Addition);  
   
            // output  
            Console.WriteLine("Addition is={0}",obj(23,27));   
            Console.ReadLine();    
        }  
    }  
}  

😊What are sealed classes in C#?
    sealed classed can not be inherited

😊 What are partial classes?
    could define multiple methods in with same class name in diffrenct class body.

😊What’s the difference between the Array.CopyTo() and Array.Clone()?
    Array.Clone copy each items shallow copy object
    Array.CopyTo is copy all daata and object to another deepcopy object

😊What are Singleton Design Patterns and how to implement them in
    Ensures a class has only one instance and provides a global point of access to it.

😊What are Indexers in C#?
    as Indexers which are used for treating an object as an array

😊What are Different Ways a Method can be Overloaded?
    a method with the same name but different signatures based on the number and type of parameters and return values.
 
😊What are Generics in C#?
    generics class or method can work with any data type.
  
😊What is a Virtual Method in C#?
    A virtual method is a method that can be redefined in derived classes  
  
😊How do you use the “using” statement in C#?  
    the using keyword to add namespaces in code-behind and class files
    using System.IO;  
    using System.Text;  

